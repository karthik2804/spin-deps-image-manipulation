// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
// Options used:
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Hash", "Clone", "PartialEq", "Eq"]
#[allow(dead_code)]
pub mod component {
  #[allow(dead_code)]
  pub mod image_manipulation_lib {
    #[allow(dead_code, clippy::all)]
    pub mod image_manipulation {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[derive(Clone, Eq, Hash, PartialEq, serde::Deserialize, serde::Serialize)]
      pub enum ImageError {
        ImageError(_rt::String),
        IoError(_rt::String),
        Unknown(_rt::String),
      }
      impl ::core::fmt::Debug for ImageError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ImageError::ImageError(e) => {
              f.debug_tuple("ImageError::ImageError").field(e).finish()
            }
            ImageError::IoError(e) => {
              f.debug_tuple("ImageError::IoError").field(e).finish()
            }
            ImageError::Unknown(e) => {
              f.debug_tuple("ImageError::Unknown").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for ImageError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }

      impl std::error::Error for ImageError {}
      pub type Image = _rt::Vec::<u8>;
      #[allow(unused_unsafe, clippy::all)]
      pub fn grayscale(img: &Image,quality: u8,) -> Result<Image,ImageError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
          let vec0 = img;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:image-manipulation-lib/image-manipulation")]
          extern "C" {
            #[link_name = "grayscale"]
            fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, _rt::as_i32(&quality), ptr1);
          let l2 = i32::from(*ptr1.add(0).cast::<u8>());
          match l2 {
            0 => {
              let e = {
                let l3 = *ptr1.add(4).cast::<*mut u8>();
                let l4 = *ptr1.add(8).cast::<usize>();
                let len5 = l4;

                _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                let v16 = match l6 {
                  0 => {
                    let e16 = {
                      let l7 = *ptr1.add(8).cast::<*mut u8>();
                      let l8 = *ptr1.add(12).cast::<usize>();
                      let len9 = l8;
                      let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                      _rt::string_lift(bytes9)
                    };
                    ImageError::ImageError(e16)
                  }
                  1 => {
                    let e16 = {
                      let l10 = *ptr1.add(8).cast::<*mut u8>();
                      let l11 = *ptr1.add(12).cast::<usize>();
                      let len12 = l11;
                      let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                      _rt::string_lift(bytes12)
                    };
                    ImageError::IoError(e16)
                  }
                  n => {
                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                    let e16 = {
                      let l13 = *ptr1.add(8).cast::<*mut u8>();
                      let l14 = *ptr1.add(12).cast::<usize>();
                      let len15 = l14;
                      let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                      _rt::string_lift(bytes15)
                    };
                    ImageError::Unknown(e16)
                  }
                };

                v16
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

  }
}
mod _rt {
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;

  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  extern crate alloc as alloc_crate;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.32.0:spin-deps:deps@0.1.0:deps:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 329] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xce\x01\x01A\x02\x01\
A\x02\x01B\x07\x01q\x03\x0bimage-error\x01s\0\x08io-error\x01s\0\x07unknown\x01s\
\0\x04\0\x0bimage-error\x03\0\0\x01p}\x04\0\x05image\x03\0\x02\x01j\x01\x03\x01\x01\
\x01@\x02\x03img\x03\x07quality}\0\x04\x04\0\x09grayscale\x01\x05\x03\03componen\
t:image-manipulation-lib/image-manipulation\x05\0\x04\0\x19spin-deps:deps/deps@0\
.1.0\x04\0\x0b\x0a\x01\0\x04deps\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.217.0\x10wit-bindgen-rust\x060.32.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

